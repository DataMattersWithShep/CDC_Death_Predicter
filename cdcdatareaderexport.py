# -*- coding: utf-8 -*-
"""CDCDataReaderExport.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kk6ABZl2pZogaSmzdc6HyDqLrtbKlXfk
"""

import pandas as pd
import time
from google.colab import drive
import sys
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
import numpy as np
from sklearn import preprocessing
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from keras.layers import Dropout
from tensorflow import keras

drive.mount('/content/drive')

start = time.time()
print("Loading the data")
loc = "/content/drive/MyDrive/IS_Project/Data/2015_data.csv"
df = pd.read_csv(loc)
end = time.time()
print("Time to read data.csv:")
print(end - start)

#Setup traiin test split
new= pd.DataFrame()

#Relationship status one hot encode
new['Resident'] = np.where(df['resident_status'] == 1, 1, 0)
new['Intrastate Nonresident'] = np.where(df['resident_status'] == 2, 1, 0)
new['Interstate Nonresident'] = np.where(df['resident_status'] == 3, 1, 0)
new['Foreign Resident'] = np.where(df['resident_status'] == 4, 1, 0)

#Inmutable factors
new['Sex'] = np.where(df['sex'] == "M", 1, 0)
new['Age'] = df['age_recode_52']
new['Edu'] = df['education_2003_revision']

#Race
new['Other'] = np.where(df['race_recode_5'] == 0, 1, 0)
new['White'] = np.where(df['race_recode_5'] == 1, 1, 0)
new['Black'] = np.where(df['resident_status'] == 2, 1, 0)
new['American Indian'] = np.where(df['resident_status'] == 3, 1, 0)
new['Asian or Pacific Islander'] = np.where(df['resident_status'] == 4, 1, 0)

#Relationship status one hot encode
new['Single'] = np.where(df['marital_status'] == "S", 1, 0)
new['Married'] = np.where(df['marital_status'] == "M", 1, 0)
new['Divorced'] = np.where(df['marital_status'] == "D", 1, 0)
new['Widowed'] = np.where(df['marital_status'] == "W", 1, 0)

new['MoD'] = df['month_of_death']

new['Infectious Diseases and Parasites'] = np.where(df['358_cause_recode'] <= 68, 1, 0)
new['Neoplasms'] = np.where((df['358_cause_recode'] >= 68) & (df['358_cause_recode'] <= 146), 1, 0)
new['Diseases of the blood and immune mechanism'] = np.where((df['358_cause_recode'] >= 147) & (df['358_cause_recode'] <= 173), 1, 0)
new['Mental and behavioral disorders '] = np.where((df['358_cause_recode'] >= 174) & (df['358_cause_recode'] <= 184), 1, 0)
new['Diseases of the nervous system '] = np.where((df['358_cause_recode'] >= 185) & (df['358_cause_recode'] <= 194), 1, 0)
new['Diseases of the eye and adnexa'] = np.where(df['358_cause_recode'] == 195, 1, 0)
new['Diseases of the ear and mastoid process'] = np.where(df['358_cause_recode'] == 196, 1, 0)
new['Diseases of the circulatory system'] = np.where((df['358_cause_recode'] >= 197) & (df['358_cause_recode'] <= 246), 1, 0)
new['Diseases of the respiratory system'] = np.where((df['358_cause_recode'] >= 247) & (df['358_cause_recode'] <= 278), 1, 0)
new['Diseases of the digestive system'] = np.where((df['358_cause_recode'] >= 279) & (df['358_cause_recode'] <= 306), 1, 0)
new['Diseases of the skin and subcutaneous tissue'] = np.where((df['358_cause_recode'] >= 307) & (df['358_cause_recode'] <= 309), 1, 0)
new['Diseases of the musculoskeletal system and connectivetissue'] = np.where((df['358_cause_recode'] >= 310) & (df['358_cause_recode'] <= 318), 1, 0)
new['Diseases of the genitourinary system'] = np.where((df['358_cause_recode'] >= 319) & (df['358_cause_recode'] <= 338), 1, 0)
new['Pregnancy, childbirth and the puerperium'] = np.where((df['358_cause_recode'] >= 339) & (df['358_cause_recode'] <= 355), 1, 0)
new['Certain conditions originating in the perinatal period'] = np.where((df['358_cause_recode'] >= 356) & (df['358_cause_recode'] <= 364), 1, 0)
new['Congenital malformations, deformations and chromosomal abnormalities'] = np.where((df['358_cause_recode'] >= 365) & (df['358_cause_recode'] <= 374), 1, 0)
new['Senility & Unknown'] = np.where((df['358_cause_recode'] >= 375) & (df['358_cause_recode'] <= 380), 1, 0)
new['External causes of mortality'] = np.where((df['358_cause_recode'] >= 381) & (df['358_cause_recode'] <= 456), 1, 0)

new = new.dropna()
cols = new.columns
new2 = new.values
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(new2)
new = pd.DataFrame(x_scaled, columns=cols)
new

#split into x and y
xcols = []
for c in cols:
  print(c)
  if ("Infectious Diseases and Parasites" == c):
    break
  else:
    xcols.append(c)
print(xcols)
x = new[xcols]
y =new.drop(xcols, axis=1)
x

y

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

model = Sequential()
neurons = 1
dr= 0.3
model.add(Dense(neurons, input_dim=len(x.columns), activation='relu'))
model.add(Dense(neurons, activation='relu'))
model.add(Dropout(dr))
model.add(Dense(neurons, activation='relu'))
model.add(Dropout(dr))
model.add(Dense(len(y.columns), activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

e = 1
bs = 32
start = time.time()
history = model.fit(X_train, y_train, epochs=e, batch_size=bs)
end = time.time()
print("Time to run model:")
print(end - start)

model.save('/content/drive/My Drive/')

model2 = keras.models.load_model('/content/drive/My Drive/')

#print(X_test)
input = [1, 0, 0, 0, 0, 0.0, 0.0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0.0]

#input = np.array(input)
f = pd.DataFrame(columns =x.columns)
print(f)
a_series = pd.Series(input, index = x.columns)
f = f.append(a_series, ignore_index=True)
print(f)
#input = X_test
y_pred = model.predict(f)
#print(y_pred[:2000])

y_pred_cat = (np.argmax(y_pred, axis=-1))
print(y_pred_cat)

test = np.array(y_test)
y_act_cat = np.argmax(test, axis=-1)
#print(y_act_cat)

accuracy_score(y_pred_cat, y_act_cat)